{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n      this.user = this.userSubject.asObservable();\n    }\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n\n    login(username, password) {\n      return this.http.post(`${environment.apiUrl}/login`, {\n        username,\n        password\n      }).pipe(map(user => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('user', JSON.stringify(user));\n        this.userSubject.next(user);\n        return user;\n      }));\n    }\n\n    logout() {\n      // remove user from local storage and set current user to null\n      localStorage.removeItem('user');\n      this.userSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n\n    register(user) {\n      return this.http.post(`${environment.apiUrl}/save`, user);\n    }\n\n    getTempCredentials() {\n      return this.http.get(`${environment.apiUrl}/getCredentials`);\n    }\n\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/all`);\n    }\n\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/candidatebyId/${id}`);\n    }\n\n    getByUserName(username) {\n      return this.http.get(`${environment.apiUrl}/candidatebyUsername/${username}`);\n    }\n\n    update(id, user) {\n      return this.http.post(`${environment.apiUrl}/update/${id}`, user).pipe(map(x => {\n        // update stored user if the logged in user updated their own record\n        if (this.userValue != null && this.userValue.candidateId != null && id == this.userValue.candidateId) {\n          // update local storage\n          const user1 = Object.assign(Object.assign({}, this.userValue), user);\n          localStorage.setItem('user', JSON.stringify(user1)); // publish updated user to subscribers\n\n          this.userSubject.next(user1);\n        }\n\n        return x;\n      }));\n    }\n\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/users/${id}`).pipe(map(x => {\n        // auto logout if the logged in user deleted their own record\n        if (this.userValue != null && id == this.userValue.candidateId) {\n          this.logout();\n        }\n\n        return x;\n      }));\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}
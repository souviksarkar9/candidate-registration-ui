{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nlet AddEditComponent = class AddEditComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n  }\n\n  ngOnInit() {\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id; // password not required in edit mode\n\n    const passwordValidators = [Validators.minLength(6)];\n\n    if (this.isAddMode) {\n      passwordValidators.push(Validators.required);\n    }\n\n    this.form = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      username: ['', Validators.required],\n      password: ['', passwordValidators]\n    });\n\n    if (!this.isAddMode) {\n      this.accountService.getById(this.id).pipe(first()).subscribe(x => {\n        this.f.firstName.setValue(x.firstName);\n        this.f.lastName.setValue(x.lastName);\n        this.f.username.setValue(x.username);\n      });\n    }\n  } // convenience getter for easy access to form fields\n\n\n  get f() {\n    return this.form.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true; // reset alerts on submit\n\n    this.alertService.clear(); // stop here if form is invalid\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.loading = true;\n\n    if (this.isAddMode) {\n      this.createUser();\n    } else {\n      this.updateUser();\n    }\n  }\n\n  createUser() {\n    this.accountService.register(this.form.value).pipe(first()).subscribe(data => {\n      this.alertService.success('User added successfully', {\n        keepAfterRouteChange: true\n      });\n      this.router.navigate(['.', {\n        relativeTo: this.route\n      }]);\n    }, error => {\n      this.alertService.error(error);\n      this.loading = false;\n    });\n  }\n\n  updateUser() {\n    this.accountService.update(this.id, this.form.value).pipe(first()).subscribe(data => {\n      this.alertService.success('Update successful', {\n        keepAfterRouteChange: true\n      });\n      this.router.navigate(['..', {\n        relativeTo: this.route\n      }]);\n    }, error => {\n      this.alertService.error(error);\n      this.loading = false;\n    });\n  }\n\n};\nAddEditComponent = __decorate([Component({\n  templateUrl: 'add-edit.component.html'\n})], AddEditComponent);\nexport { AddEditComponent };","map":null,"metadata":{},"sourceType":"module"}
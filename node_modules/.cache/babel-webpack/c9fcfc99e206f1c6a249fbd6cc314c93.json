{"ast":null,"code":"import { Validators, FormControl, NgModel, NG_VALIDATORS } from '@angular/forms';\nimport { Directive, Input, forwardRef, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} obj\n * @return {?}\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nfunction isPresent(obj) {\n  return obj !== undefined && obj !== null;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction isDate(obj) {\n  return !/Invalid|NaN/.test(new Date(obj).toString());\n}\n/**\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction parseDate(obj) {\n  try {\n    if (typeof obj === 'object' && obj.year != null && obj.month != null && obj.day != null) {\n      return obj.year + '-' + obj.month + '-' + obj.day;\n    }\n  } catch (\n  /** @type {?} */\n  e) {}\n\n  return obj;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst arrayLength = value => {\n  return control => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    obj = control.value;\n    return Array.isArray(obj) && obj.length >= +value ? null : {\n      arrayLength: +value\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst base64 = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n  return /^(?:[A-Z0-9+\\/]{4})*(?:[A-Z0-9+\\/]{2}==|[A-Z0-9+\\/]{3}=|[A-Z0-9+\\/]{4})$/i.test(v) ? null : {\n    'base64': true\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst creditCard = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n  const\n  /** @type {?} */\n  sanitized = v.replace(/[^0-9]+/g, ''); // problem with chrome\n\n  /* tslint:disable */\n\n  if (!/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|(?:9792)\\d{12})$/.test(sanitized)) {\n    return {\n      creditCard: true\n    };\n  }\n  /* tslint:enable */\n\n\n  let\n  /** @type {?} */\n  sum = 0;\n  let\n  /** @type {?} */\n  digit;\n  let\n  /** @type {?} */\n  tmpNum;\n  let\n  /** @type {?} */\n  shouldDouble;\n\n  for (let\n  /** @type {?} */\n  i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n\n    if (shouldDouble) {\n      tmpNum *= 2;\n\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n\n    shouldDouble = !shouldDouble;\n  }\n\n  if (Boolean(sum % 10 === 0 ? sanitized : false)) {\n    return null;\n  }\n\n  return {\n    creditCard: true\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst date = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n  return isDate(v) ? null : {\n    date: true\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst dateISO = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n  return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(v) ? null : {\n    dateISO: true\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst digits = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n  return /^\\d+$/.test(v) ? null : {\n    digits: true\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst email = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n  /* tslint:disable */\n\n  return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v) ? null : {\n    'email': true\n  };\n  /* tslint:enable */\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst equal = val => {\n  return control => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = control.value;\n    return val === v ? null : {\n      equal: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst equalTo = equalControl => {\n  let\n  /** @type {?} */\n  subscribe = false;\n  return control => {\n    if (!subscribe) {\n      subscribe = true;\n      equalControl.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    const\n    /** @type {?} */\n    v = control.value;\n    return equalControl.value === v ? null : {\n      equalTo: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst gt = value => {\n  return control => {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = +control.value;\n    return v > +value ? null : {\n      gt: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst gte = value => {\n  return control => {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = +control.value;\n    return v >= +value ? null : {\n      gte: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst json = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n\n  try {\n    const\n    /** @type {?} */\n    obj = JSON.parse(v);\n\n    if (Boolean(obj) && typeof obj === 'object') {\n      return null;\n    }\n  } catch (\n  /** @type {?} */\n  e) {}\n\n  return {\n    json: true\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst lt = value => {\n  return control => {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = +control.value;\n    return v < +value ? null : {\n      lt: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst lte = value => {\n  return control => {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = +control.value;\n    return v <= +value ? null : {\n      lte: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst max = value => {\n  return control => {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = +control.value;\n    return v <= +value ? null : {\n      actualValue: v,\n      requiredValue: +value,\n      max: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst maxDate = maxInput => {\n  let\n  /** @type {?} */\n  value;\n  let\n  /** @type {?} */\n  subscribe = false;\n  let\n  /** @type {?} */\n  maxValue = maxInput;\n  const\n  /** @type {?} */\n  isForm = maxInput instanceof FormControl || maxInput instanceof NgModel;\n  return control => {\n    if (!subscribe && isForm) {\n      subscribe = true;\n      maxInput.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    if (isForm) {\n      maxValue = maxInput.value;\n    }\n\n    value = parseDate(maxValue);\n\n    if (!isDate(value) && !(value instanceof Function)) {\n      if (value == null) {\n        return null;\n      } else if (isForm) {\n        return {\n          maxDate: true,\n          error: 'maxDate is invalid'\n        };\n      } else {\n        throw Error('maxDate value must be or return a formatted date');\n      }\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    d = new Date(parseDate(control.value)).getTime();\n\n    if (!isDate(d)) {\n      return {\n        value: true\n      };\n    }\n\n    if (value instanceof Function) {\n      value = value();\n    }\n\n    return d <= new Date(value).getTime() ? null : {\n      maxDate: true,\n      error: 'greater than maxDate'\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst min = value => {\n  return control => {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = +control.value;\n    return v >= +value ? null : {\n      actualValue: v,\n      requiredValue: +value,\n      min: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst minDate = minInput => {\n  let\n  /** @type {?} */\n  value;\n  let\n  /** @type {?} */\n  subscribe = false;\n  let\n  /** @type {?} */\n  minValue = minInput;\n  const\n  /** @type {?} */\n  isForm = minInput instanceof FormControl || minInput instanceof NgModel;\n  return control => {\n    if (!subscribe && isForm) {\n      subscribe = true;\n      minInput.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    if (isForm) {\n      minValue = minInput.value;\n    }\n\n    value = parseDate(minValue);\n\n    if (!isDate(value) && !(value instanceof Function)) {\n      if (value == null) {\n        return null;\n      } else if (isForm) {\n        return {\n          minDate: true,\n          error: 'minDate is invalid'\n        };\n      } else {\n        throw Error('minDate value must be or return a formatted date');\n      }\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    d = new Date(parseDate(control.value)).getTime();\n\n    if (!isDate(d)) {\n      return {\n        value: true\n      };\n    }\n\n    if (value instanceof Function) {\n      value = value();\n    }\n\n    return d >= new Date(value).getTime() ? null : {\n      minDate: true,\n      error: 'lower than minDate'\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst notEqual = val => {\n  return control => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = control.value;\n    return val !== v ? null : {\n      notEqual: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst notEqualTo = notEqualControl => {\n  let\n  /** @type {?} */\n  subscribe = false;\n  return control => {\n    if (!subscribe) {\n      subscribe = true;\n      notEqualControl.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    const\n    /** @type {?} */\n    v = control.value;\n    return notEqualControl.value !== v ? null : {\n      notEqualTo: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst number = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n  return /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(v) ? null : {\n    'number': true\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst property = value => {\n  return control => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    properties = value.split(',');\n    const\n    /** @type {?} */\n    obj = control.value;\n    let\n    /** @type {?} */\n    isValid = true;\n\n    for (const\n    /** @type {?} */\n    prop of properties) {\n      if (obj[prop] == null) {\n        isValid = false;\n        break;\n      }\n    }\n\n    return isValid ? null : {\n      hasProperty: true,\n      property: value\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst range = value => {\n  return control => {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = +control.value;\n    return v >= value[0] && v <= value[1] ? null : {\n      actualValue: v,\n      requiredValue: value,\n      range: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst rangeLength = value => {\n  return control => {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = control.value;\n    return v.length >= value[0] && v.length <= value[1] ? null : {\n      rangeLength: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst uuids = {\n  '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  'all': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n};\n\nconst uuid = version => {\n  return control => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const\n    /** @type {?} */\n    v = control.value;\n    const\n    /** @type {?} */\n    pattern = uuids[version] || uuids.all;\n    return new RegExp(pattern).test(v) ? null : {\n      uuid: true\n    };\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst url = control => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const\n  /** @type {?} */\n  v = control.value;\n  /* tslint:disable */\n\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(v) ? null : {\n    'url': true\n  };\n  /* tslint:enable */\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst ARRAY_LENGTH_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => ArrayLengthValidator),\n  multi: true\n};\nlet ArrayLengthValidator = /*#__PURE__*/(() => {\n  class ArrayLengthValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = arrayLength(this.arrayLength);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'arrayLength') {\n          this.validator = arrayLength(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  ArrayLengthValidator.Éµfac = function ArrayLengthValidator_Factory(t) {\n    return new (t || ArrayLengthValidator)();\n  };\n\n  ArrayLengthValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: ArrayLengthValidator,\n    selectors: [[\"\", \"arrayLength\", \"\", \"formControlName\", \"\"], [\"\", \"arrayLength\", \"\", \"formControl\", \"\"], [\"\", \"arrayLength\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      arrayLength: \"arrayLength\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([ARRAY_LENGTH_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return ArrayLengthValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst BASE64_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => Base64Validator),\n  multi: true\n};\nlet Base64Validator = /*#__PURE__*/(() => {\n  class Base64Validator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return base64(c);\n    }\n\n  }\n\n  Base64Validator.Éµfac = function Base64Validator_Factory(t) {\n    return new (t || Base64Validator)();\n  };\n\n  Base64Validator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: Base64Validator,\n    selectors: [[\"\", \"base64\", \"\", \"formControlName\", \"\"], [\"\", \"base64\", \"\", \"formControl\", \"\"], [\"\", \"base64\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([BASE64_VALIDATOR])]\n  });\n  return Base64Validator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst CREDIT_CARD_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CreditCardValidator),\n  multi: true\n};\nlet CreditCardValidator = /*#__PURE__*/(() => {\n  class CreditCardValidator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return creditCard(c);\n    }\n\n  }\n\n  CreditCardValidator.Éµfac = function CreditCardValidator_Factory(t) {\n    return new (t || CreditCardValidator)();\n  };\n\n  CreditCardValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: CreditCardValidator,\n    selectors: [[\"\", \"creditCard\", \"\", \"formControlName\", \"\"], [\"\", \"creditCard\", \"\", \"formControl\", \"\"], [\"\", \"creditCard\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([CREDIT_CARD_VALIDATOR])]\n  });\n  return CreditCardValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst DATE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DateValidator),\n  multi: true\n};\nlet DateValidator = /*#__PURE__*/(() => {\n  class DateValidator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return date(c);\n    }\n\n  }\n\n  DateValidator.Éµfac = function DateValidator_Factory(t) {\n    return new (t || DateValidator)();\n  };\n\n  DateValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: DateValidator,\n    selectors: [[\"\", \"date\", \"\", \"formControlName\", \"\"], [\"\", \"date\", \"\", \"formControl\", \"\"], [\"\", \"date\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([DATE_VALIDATOR])]\n  });\n  return DateValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst DATE_ISO_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DateISOValidator),\n  multi: true\n};\nlet DateISOValidator = /*#__PURE__*/(() => {\n  class DateISOValidator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return dateISO(c);\n    }\n\n  }\n\n  DateISOValidator.Éµfac = function DateISOValidator_Factory(t) {\n    return new (t || DateISOValidator)();\n  };\n\n  DateISOValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: DateISOValidator,\n    selectors: [[\"\", \"dateISO\", \"\", \"formControlName\", \"\"], [\"\", \"dateISO\", \"\", \"formControl\", \"\"], [\"\", \"dateISO\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([DATE_ISO_VALIDATOR])]\n  });\n  return DateISOValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst DIGITS_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DigitsValidator),\n  multi: true\n};\nlet DigitsValidator = /*#__PURE__*/(() => {\n  class DigitsValidator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return digits(c);\n    }\n\n  }\n\n  DigitsValidator.Éµfac = function DigitsValidator_Factory(t) {\n    return new (t || DigitsValidator)();\n  };\n\n  DigitsValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: DigitsValidator,\n    selectors: [[\"\", \"digits\", \"\", \"formControlName\", \"\"], [\"\", \"digits\", \"\", \"formControl\", \"\"], [\"\", \"digits\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([DIGITS_VALIDATOR])]\n  });\n  return DigitsValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst EMAIL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\nlet EmailValidator = /*#__PURE__*/(() => {\n  class EmailValidator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return email(c);\n    }\n\n  }\n\n  EmailValidator.Éµfac = function EmailValidator_Factory(t) {\n    return new (t || EmailValidator)();\n  };\n\n  EmailValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: EmailValidator,\n    selectors: [[\"\", \"ngvemail\", \"\", \"formControlName\", \"\"], [\"\", \"ngvemail\", \"\", \"formControl\", \"\"], [\"\", \"ngvemail\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([EMAIL_VALIDATOR])]\n  });\n  return EmailValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst EQUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EqualValidator),\n  multi: true\n};\nlet EqualValidator = /*#__PURE__*/(() => {\n  class EqualValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = equal(this.equal);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'equal') {\n          this.validator = equal(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  EqualValidator.Éµfac = function EqualValidator_Factory(t) {\n    return new (t || EqualValidator)();\n  };\n\n  EqualValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: EqualValidator,\n    selectors: [[\"\", \"equal\", \"\", \"formControlName\", \"\"], [\"\", \"equal\", \"\", \"formControl\", \"\"], [\"\", \"equal\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      equal: \"equal\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([EQUAL_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return EqualValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst EQUAL_TO_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EqualToValidator),\n  multi: true\n};\nlet EqualToValidator = /*#__PURE__*/(() => {\n  class EqualToValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = equalTo(this.equalTo);\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n\n  }\n\n  EqualToValidator.Éµfac = function EqualToValidator_Factory(t) {\n    return new (t || EqualToValidator)();\n  };\n\n  EqualToValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: EqualToValidator,\n    selectors: [[\"\", \"equalTo\", \"\", \"formControlName\", \"\"], [\"\", \"equalTo\", \"\", \"formControl\", \"\"], [\"\", \"equalTo\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      equalTo: \"equalTo\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([EQUAL_TO_VALIDATOR])]\n  });\n  return EqualToValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst GREATER_THAN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => GreaterThanValidator),\n  multi: true\n};\nlet GreaterThanValidator = /*#__PURE__*/(() => {\n  class GreaterThanValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = gt(this.gt);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'gt') {\n          this.validator = gt(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  GreaterThanValidator.Éµfac = function GreaterThanValidator_Factory(t) {\n    return new (t || GreaterThanValidator)();\n  };\n\n  GreaterThanValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: GreaterThanValidator,\n    selectors: [[\"\", \"gt\", \"\", \"formControlName\", \"\"], [\"\", \"gt\", \"\", \"formControl\", \"\"], [\"\", \"gt\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      gt: \"gt\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([GREATER_THAN_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return GreaterThanValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst GREATER_THAN_EQUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => GreaterThanEqualValidator),\n  multi: true\n};\nlet GreaterThanEqualValidator = /*#__PURE__*/(() => {\n  class GreaterThanEqualValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = gte(this.gte);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'gte') {\n          this.validator = gte(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  GreaterThanEqualValidator.Éµfac = function GreaterThanEqualValidator_Factory(t) {\n    return new (t || GreaterThanEqualValidator)();\n  };\n\n  GreaterThanEqualValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: GreaterThanEqualValidator,\n    selectors: [[\"\", \"gte\", \"\", \"formControlName\", \"\"], [\"\", \"gte\", \"\", \"formControl\", \"\"], [\"\", \"gte\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      gte: \"gte\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([GREATER_THAN_EQUAL_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return GreaterThanEqualValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst JSON_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => JSONValidator),\n  multi: true\n};\nlet JSONValidator = /*#__PURE__*/(() => {\n  class JSONValidator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return json(c);\n    }\n\n  }\n\n  JSONValidator.Éµfac = function JSONValidator_Factory(t) {\n    return new (t || JSONValidator)();\n  };\n\n  JSONValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: JSONValidator,\n    selectors: [[\"\", \"json\", \"\", \"formControlName\", \"\"], [\"\", \"json\", \"\", \"formControl\", \"\"], [\"\", \"json\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([JSON_VALIDATOR])]\n  });\n  return JSONValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst LESS_THAN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => LessThanValidator),\n  multi: true\n};\nlet LessThanValidator = /*#__PURE__*/(() => {\n  class LessThanValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = lt(this.lt);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'lt') {\n          this.validator = lt(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  LessThanValidator.Éµfac = function LessThanValidator_Factory(t) {\n    return new (t || LessThanValidator)();\n  };\n\n  LessThanValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: LessThanValidator,\n    selectors: [[\"\", \"lt\", \"\", \"formControlName\", \"\"], [\"\", \"lt\", \"\", \"formControl\", \"\"], [\"\", \"lt\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      lt: \"lt\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([LESS_THAN_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return LessThanValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst LESS_THAN_EQUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => LessThanEqualValidator),\n  multi: true\n};\nlet LessThanEqualValidator = /*#__PURE__*/(() => {\n  class LessThanEqualValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = lte(this.lte);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'lte') {\n          this.validator = lte(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  LessThanEqualValidator.Éµfac = function LessThanEqualValidator_Factory(t) {\n    return new (t || LessThanEqualValidator)();\n  };\n\n  LessThanEqualValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: LessThanEqualValidator,\n    selectors: [[\"\", \"lte\", \"\", \"formControlName\", \"\"], [\"\", \"lte\", \"\", \"formControl\", \"\"], [\"\", \"lte\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      lte: \"lte\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([LESS_THAN_EQUAL_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return LessThanEqualValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst MAX_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxValidator),\n  multi: true\n};\nlet MaxValidator = /*#__PURE__*/(() => {\n  class MaxValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = max(this.max);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'max') {\n          this.validator = max(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  MaxValidator.Éµfac = function MaxValidator_Factory(t) {\n    return new (t || MaxValidator)();\n  };\n\n  MaxValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: MaxValidator,\n    selectors: [[\"\", \"max\", \"\", \"formControlName\", \"\"], [\"\", \"max\", \"\", \"formControl\", \"\"], [\"\", \"max\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      max: \"max\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([MAX_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return MaxValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst MAX_DATE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxDateValidator),\n  multi: true\n};\nlet MaxDateValidator = /*#__PURE__*/(() => {\n  class MaxDateValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = maxDate(this.maxDate);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'maxDate') {\n          this.validator = maxDate(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  MaxDateValidator.Éµfac = function MaxDateValidator_Factory(t) {\n    return new (t || MaxDateValidator)();\n  };\n\n  MaxDateValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: MaxDateValidator,\n    selectors: [[\"\", \"maxDate\", \"\", \"formControlName\", \"\"], [\"\", \"maxDate\", \"\", \"formControl\", \"\"], [\"\", \"maxDate\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      maxDate: \"maxDate\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([MAX_DATE_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return MaxDateValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst MIN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinValidator),\n  multi: true\n};\nlet MinValidator = /*#__PURE__*/(() => {\n  class MinValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = min(this.min);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'min') {\n          this.validator = min(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  MinValidator.Éµfac = function MinValidator_Factory(t) {\n    return new (t || MinValidator)();\n  };\n\n  MinValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: MinValidator,\n    selectors: [[\"\", \"min\", \"\", \"formControlName\", \"\"], [\"\", \"min\", \"\", \"formControl\", \"\"], [\"\", \"min\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      min: \"min\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([MIN_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return MinValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst MIN_DATE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinDateValidator),\n  multi: true\n};\nlet MinDateValidator = /*#__PURE__*/(() => {\n  class MinDateValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = minDate(this.minDate);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'minDate') {\n          this.validator = minDate(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  MinDateValidator.Éµfac = function MinDateValidator_Factory(t) {\n    return new (t || MinDateValidator)();\n  };\n\n  MinDateValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: MinDateValidator,\n    selectors: [[\"\", \"minDate\", \"\", \"formControlName\", \"\"], [\"\", \"minDate\", \"\", \"formControl\", \"\"], [\"\", \"minDate\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      minDate: \"minDate\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([MIN_DATE_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return MinDateValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst NOT_EQUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NotEqualValidator),\n  multi: true\n};\nlet NotEqualValidator = /*#__PURE__*/(() => {\n  class NotEqualValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = notEqual(this.notEqual);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'notEqual') {\n          this.validator = notEqual(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  NotEqualValidator.Éµfac = function NotEqualValidator_Factory(t) {\n    return new (t || NotEqualValidator)();\n  };\n\n  NotEqualValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: NotEqualValidator,\n    selectors: [[\"\", \"notEqual\", \"\", \"formControlName\", \"\"], [\"\", \"notEqual\", \"\", \"formControl\", \"\"], [\"\", \"notEqual\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      notEqual: \"notEqual\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([NOT_EQUAL_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return NotEqualValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst NOT_EQUAL_TO_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NotEqualToValidator),\n  multi: true\n};\nlet NotEqualToValidator = /*#__PURE__*/(() => {\n  class NotEqualToValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = notEqualTo(this.notEqualTo);\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n\n  }\n\n  NotEqualToValidator.Éµfac = function NotEqualToValidator_Factory(t) {\n    return new (t || NotEqualToValidator)();\n  };\n\n  NotEqualToValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: NotEqualToValidator,\n    selectors: [[\"\", \"notEqualTo\", \"\", \"formControlName\", \"\"], [\"\", \"notEqualTo\", \"\", \"formControl\", \"\"], [\"\", \"notEqualTo\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      notEqualTo: \"notEqualTo\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([NOT_EQUAL_TO_VALIDATOR])]\n  });\n  return NotEqualToValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst NUMBER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NumberValidator),\n  multi: true\n};\nlet NumberValidator = /*#__PURE__*/(() => {\n  class NumberValidator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return number(c);\n    }\n\n  }\n\n  NumberValidator.Éµfac = function NumberValidator_Factory(t) {\n    return new (t || NumberValidator)();\n  };\n\n  NumberValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: NumberValidator,\n    selectors: [[\"\", \"number\", \"\", \"formControlName\", \"\"], [\"\", \"number\", \"\", \"formControl\", \"\"], [\"\", \"number\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([NUMBER_VALIDATOR])]\n  });\n  return NumberValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst PROPERTY_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PropertyValidator),\n  multi: true\n};\nlet PropertyValidator = /*#__PURE__*/(() => {\n  class PropertyValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = property(this.property);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'property') {\n          this.validator = property(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  PropertyValidator.Éµfac = function PropertyValidator_Factory(t) {\n    return new (t || PropertyValidator)();\n  };\n\n  PropertyValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: PropertyValidator,\n    selectors: [[\"\", \"property\", \"\", \"formControlName\", \"\"], [\"\", \"property\", \"\", \"formControl\", \"\"], [\"\", \"property\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      property: \"property\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([PROPERTY_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return PropertyValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst RANGE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RangeValidator),\n  multi: true\n};\nlet RangeValidator = /*#__PURE__*/(() => {\n  class RangeValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = range(this.range);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'range') {\n          this.validator = range(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  RangeValidator.Éµfac = function RangeValidator_Factory(t) {\n    return new (t || RangeValidator)();\n  };\n\n  RangeValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: RangeValidator,\n    selectors: [[\"\", \"range\", \"\", \"formControlName\", \"\"], [\"\", \"range\", \"\", \"formControl\", \"\"], [\"\", \"range\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      range: \"range\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([RANGE_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return RangeValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst RANGE_LENGTH_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RangeLengthValidator),\n  multi: true\n};\nlet RangeLengthValidator = /*#__PURE__*/(() => {\n  class RangeLengthValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = rangeLength(this.rangeLength);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'rangeLength') {\n          this.validator = rangeLength(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  RangeLengthValidator.Éµfac = function RangeLengthValidator_Factory(t) {\n    return new (t || RangeLengthValidator)();\n  };\n\n  RangeLengthValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: RangeLengthValidator,\n    selectors: [[\"\", \"rangeLength\", \"\", \"formControlName\", \"\"], [\"\", \"rangeLength\", \"\", \"formControl\", \"\"], [\"\", \"rangeLength\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      rangeLength: \"rangeLength\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([RANGE_LENGTH_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return RangeLengthValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst URL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => UrlValidator),\n  multi: true\n};\nlet UrlValidator = /*#__PURE__*/(() => {\n  class UrlValidator {\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n      return url(c);\n    }\n\n  }\n\n  UrlValidator.Éµfac = function UrlValidator_Factory(t) {\n    return new (t || UrlValidator)();\n  };\n\n  UrlValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: UrlValidator,\n    selectors: [[\"\", \"url\", \"\", \"formControlName\", \"\"], [\"\", \"url\", \"\", \"formControl\", \"\"], [\"\", \"url\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([URL_VALIDATOR])]\n  });\n  return UrlValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst UUID_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => UUIDValidator),\n  multi: true\n};\nlet UUIDValidator = /*#__PURE__*/(() => {\n  class UUIDValidator {\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.validator = uuid(this.uuid);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      for (const\n      /** @type {?} */\n      key in changes) {\n        if (key === 'uuid') {\n          this.validator = uuid(changes[key].currentValue);\n\n          if (this.onChange) {\n            this.onChange();\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n\n\n    validate(c) {\n      return this.validator(c);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnValidatorChange(fn) {\n      this.onChange = fn;\n    }\n\n  }\n\n  UUIDValidator.Éµfac = function UUIDValidator_Factory(t) {\n    return new (t || UUIDValidator)();\n  };\n\n  UUIDValidator.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: UUIDValidator,\n    selectors: [[\"\", \"uuid\", \"\", \"formControlName\", \"\"], [\"\", \"uuid\", \"\", \"formControl\", \"\"], [\"\", \"uuid\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      uuid: \"uuid\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([UUID_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return UUIDValidator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nconst CustomValidators = {\n  arrayLength,\n  base64,\n  creditCard,\n  date,\n  dateISO,\n  digits,\n  email,\n  equal,\n  equalTo,\n  gt,\n  gte,\n  json,\n  lt,\n  lte,\n  max,\n  maxDate,\n  min,\n  minDate,\n  notEqual,\n  notEqualTo,\n  number,\n  property,\n  range,\n  rangeLength,\n  url,\n  uuid\n};\nconst CustomDirectives = [ArrayLengthValidator, Base64Validator, CreditCardValidator, DateValidator, DateISOValidator, DigitsValidator, EmailValidator, EqualValidator, EqualToValidator, GreaterThanValidator, GreaterThanEqualValidator, JSONValidator, LessThanValidator, LessThanEqualValidator, MaxValidator, MaxDateValidator, MinValidator, MinDateValidator, NotEqualValidator, NotEqualToValidator, NumberValidator, PropertyValidator, RangeValidator, RangeLengthValidator, UrlValidator, UUIDValidator];\nlet CustomFormsModule = /*#__PURE__*/(() => {\n  class CustomFormsModule {}\n\n  CustomFormsModule.Éµfac = function CustomFormsModule_Factory(t) {\n    return new (t || CustomFormsModule)();\n  };\n\n  CustomFormsModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: CustomFormsModule\n  });\n  CustomFormsModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({});\n  return CustomFormsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(CustomFormsModule, {\n    declarations: [ArrayLengthValidator, Base64Validator, CreditCardValidator, DateValidator, DateISOValidator, DigitsValidator, EmailValidator, EqualValidator, EqualToValidator, GreaterThanValidator, GreaterThanEqualValidator, JSONValidator, LessThanValidator, LessThanEqualValidator, MaxValidator, MaxDateValidator, MinValidator, MinDateValidator, NotEqualValidator, NotEqualToValidator, NumberValidator, PropertyValidator, RangeValidator, RangeLengthValidator, UrlValidator, UUIDValidator],\n    exports: [ArrayLengthValidator, Base64Validator, CreditCardValidator, DateValidator, DateISOValidator, DigitsValidator, EmailValidator, EqualValidator, EqualToValidator, GreaterThanValidator, GreaterThanEqualValidator, JSONValidator, LessThanValidator, LessThanEqualValidator, MaxValidator, MaxDateValidator, MinValidator, MinDateValidator, NotEqualValidator, NotEqualToValidator, NumberValidator, PropertyValidator, RangeValidator, RangeLengthValidator, UrlValidator, UUIDValidator]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CustomValidators, CustomFormsModule, ArrayLengthValidator as Éµba, arrayLength as Éµa, Base64Validator as Éµbb, base64 as Éµb, CreditCardValidator as Éµbc, creditCard as Éµc, DateISOValidator as Éµbe, dateISO as Éµe, DateValidator as Éµbd, date as Éµd, DigitsValidator as Éµbf, digits as Éµf, EmailValidator as Éµbg, email as Éµg, EqualToValidator as Éµbi, equalTo as Éµi, EqualValidator as Éµbh, equal as Éµh, GreaterThanEqualValidator as Éµbk, gte as Éµk, GreaterThanValidator as Éµbj, gt as Éµj, JSONValidator as Éµbl, json as Éµl, LessThanEqualValidator as Éµbn, lte as Éµn, LessThanValidator as Éµbm, lt as Éµm, MaxDateValidator as Éµbp, maxDate as Éµp, MaxValidator as Éµbo, max as Éµo, MinDateValidator as Éµbr, minDate as Éµr, MinValidator as Éµbq, min as Éµq, NotEqualToValidator as Éµbt, notEqualTo as Éµt, NotEqualValidator as Éµbs, notEqual as Éµs, NumberValidator as Éµbu, number as Éµu, PropertyValidator as Éµbv, property as Éµv, RangeLengthValidator as Éµbx, rangeLength as Éµx, RangeValidator as Éµbw, range as Éµw, UrlValidator as Éµby, url as Éµy, UUIDValidator as Éµbz, uuid as Éµz }; //# sourceMappingURL=ng4-validators.js.map","map":null,"metadata":{},"sourceType":"module"}